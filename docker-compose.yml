services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-agentic}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-agentic}"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine

  migrate:
    build:
      context: ./src
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      REDIS_URL: ${REDIS_URL}
      REDIS_URL_QUEUE: ${REDIS_URL_QUEUE}
      DATABASE_URL: ${DATABASE_URL_SYNC}
      ENV: ${ENV}
      PYTHONPATH: /srv
    working_dir: /srv
    command: sh -lc "python -m alembic -c db/alembic.ini upgrade head"

  api:
    build:
      context: ./src
      dockerfile: Dockerfile
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started
    environment:
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}
      ARTIFACTS_DIR: /srv/artifacts
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REDIS_URL_QUEUE: ${REDIS_URL_QUEUE}
      ENV: ${ENV}
      APP_NAME: ${APP_NAME}
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET}
      RATE_LIMIT_USER_PER_MIN: ${RATE_LIMIT_USER_PER_MIN}
      RATE_LIMIT_TENANT_PER_MIN: ${RATE_LIMIT_TENANT_PER_MIN}
      PYTHONPATH: /srv
    volumes:
      - ./artifacts:/srv/artifacts
    working_dir: /srv
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080
    expose:
      - "8080"
    restart: unless-stopped
    ports:
    - "8081:8080"

  worker:
    build:
        context: ./src
        dockerfile: Dockerfile
    depends_on: [migrate, redis]
    environment:
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}
      ARTIFACTS_DIR: ${ARTIFACTS_DIR}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REDIS_URL_QUEUE: ${REDIS_URL_QUEUE}
      ENV: ${ENV}
      APP_NAME: ${APP_NAME}
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET}
      PYTHONPATH: /srv
      PLUGINS_DIR: /srv/plugins
      MODELS_CONFIG: /srv/config/models.yaml
      SERVICE_FLAGS: "*"
    volumes:
      - "./artifacts:${ARTIFACTS_DIR}"
      - "./plugins:/srv/plugins"
    command: celery -A app.workers.celery_app worker -Q cpu -c 2 --loglevel=INFO
    restart: unless-stopped

  caddy:
    image: caddy:2
    depends_on:
      api:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    environment:
      ACME_EMAIL: ${ACME_EMAIL}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config

volumes:
  pg_data:
  caddy_data:
  caddy_config:
