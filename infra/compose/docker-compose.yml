# infra/compose/docker-compose.yml
# NOTE: no "version:" key (it's obsolete in Compose v2)

services:
  # ---- Temporal (workflows) ----
  temporal-postgres:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
      POSTGRES_DB: temporal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal -d temporal"]
      interval: 5s
      timeout: 3s
      retries: 40

  temporal:
    image: temporalio/auto-setup:1.23.0
    depends_on:
      temporal-postgres:
        condition: service_healthy
    environment:
      DB: postgresql
      DB_PORT: 5432
      POSTGRES_USER: temporal
      POSTGRES_PWD: temporal
      POSTGRES_SEEDS: temporal-postgres
      POSTGRES_DB: temporal
      DYNAMIC_CONFIG_FILE_PATH: /etc/temporal/config/dynamicconfig/development.yaml
    ports:
      - "7233:7233" # Temporal gRPC
    volumes:
      - ./temporal-dynamic:/etc/temporal/config/dynamicconfig

  temporal-ui:
    image: temporalio/ui:2.26.2
    environment:
      TEMPORAL_ADDRESS: temporal:7233
    depends_on:
      - temporal
    ports:
      - "8233:8080" # http://localhost:8233

  # ---- Redpanda (Kafka-compatible) ----
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.8
    command:
      - redpanda start
      - --overprovisioned
      - --smp=1
      - --memory=512M
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      - --set redpanda.enable_rack_awareness=false
      - --kafka-addr 0.0.0.0:9092
      - --advertise-kafka-addr redpanda:9092
    ports:
      - "9092:9092"   # Kafka API (broker=redpanda:9092 inside, localhost:9092 outside)
      - "9644:9644"   # Admin API
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info --api-urls=localhost:9644 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 40

  # ---- MinIO (S3-compatible) ----
  # use a tag that exists for both amd64/arm64; :latest is fine for dev
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 30

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      mc config host add local http://minio:9000 minio minio123;
      mc mb -p local/o2 || true;
      mc anonymous set download local/o2 || true;
      "
  ray-head:
    image: rayproject/ray:2.9.3      # <- tag that works well in emulation
    platform: linux/amd64            # <- run under qemu on Apple Silicon
    command: >
      bash -lc "ray start --head
                --dashboard-host 0.0.0.0
                --port 6379
                --dashboard-port 8265
                --ray-client-server-port 10001
                && tail -f /dev/null"
    environment:
      - RAY_DISABLE_DOCKER_CPU_WARNING=1
    ports:
      - "8265:8265"                   # dashboard
      - "10001:10001"                 # ray client
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # ---- Qdrant (vector DB) ----
  qdrant:
    image: qdrant/qdrant:v1.9.2
    ports:
      - "6333:6333"

volumes:
  minio_data:
