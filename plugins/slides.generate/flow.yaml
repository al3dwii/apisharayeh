version: 1
vars:
  project_id: "{{ inputs.project_id | default(random_id('prj_')) }}"
  slides_count: "{{ inputs.slides_count | default(12) }}"
  topic_effective: "{{ inputs.topic or inputs.prompt or 'عرض تقديمي تجريبي' }}"
  queries: "{{ inputs.images_query_pack | default(['موضوع','أدوات','فوائد','تحديات']) }}"
steps:
  - id: source_branch
    run: switch
    when:
      "inputs.source == 'docx'":
        run: sequence
        do:
          - id: fetch_docx
            run: io.fetch
            in: { url: "{{ inputs.docx_url }}", to_dir: "input" }
            out: { path: "@docx_path" }
          - id: detect_type
            run: doc.detect_type
            in: { path: "@docx_path" }
            out: { kind: "@doc_kind" }
          - id: parse_docx
            run: doc.parse_docx
            in: { path: "@docx_path" }
            out: { text: "@doc_text" }
          - id: outline_from_doc
            run: slides.outline.from_doc
            in:
              text: "@doc_text"
              language: "{{ inputs.language | default('ar') }}"
              count: "{{ vars.slides_count }}"
            out: { outline: "@outline" }
      "inputs.source == 'prompt'":
        run: slides.outline.from_prompt_stub
        in:
          topic: "{{ vars.topic_effective }}"
          language: "{{ inputs.language | default('ar') }}"
          count: "{{ vars.slides_count }}"
        out: { outline: "@outline" }
      "true":
        run: slides.outline.from_prompt_stub
        in:
          topic: "{{ vars.topic_effective }}"
          language: "{{ inputs.language | default('ar') }}"
          count: "{{ vars.slides_count }}"
        out: { outline: "@outline" }

  - id: ensure_outline
    run: switch
    when:
      "{{ not @outline }}":
        run: slides.outline.from_prompt_stub
        in:
          topic: "{{ vars.topic_effective }}"
          language: "{{ inputs.language | default('ar') }}"
          count: "{{ vars.slides_count }}"
        out: { outline: "@outline" }
      "true":
        run: io.save_text
        in: { text: "ok", to_dir: "tmp", filename: "noop.txt" }
        out: { path: "@noop" }

  - id: get_images
    run: vision.images.from_fixtures
    needs: [ensure_outline]
    in:
      project_id: "{{ vars.project_id }}"
      queries: "{{ vars.queries }}"
    out: { images: "@images" }

  - id: render
    run: slides.html.render
    needs: [ensure_outline, get_images]
    in:
      project_id: "{{ vars.project_id }}"
      outline: "@outline"
      theme: "{{ inputs.theme | default('academic-ar') }}"
      images: "@images"
    out: { slides_html: "@slides_html" }

  - id: build_pptx
    run: slides.pptx.build
    needs: [render]
    in:
      project_id: "{{ vars.project_id }}"
      outline: "@outline"
      title: "{{ (@outline and @outline[0]['title']) or vars.topic_effective }}"
      language: "{{ inputs.language | default('ar') }}"
    out:
      pptx_url: "@pptx_url"
      pptx_path: "@pptx_path"

  - id: export_pdf
    run: slides.export.pdf_via_lo
    needs: [build_pptx]
    in:
      project_id: "{{ vars.project_id }}"
      pptx_path: "@pptx_path"
    out: { pdf_url: "@pdf_url" }

  - id: export_html
    run: slides.export.html_via_lo
    needs: [build_pptx]
    in:
      project_id: "{{ vars.project_id }}"
      pptx_path: "@pptx_path"
    out: { html_zip_url: "@html_zip_url" }

outputs:
  outline: "@outline"
  slides_html: "@slides_html"
  pdf_url: "@pdf_url"
  html_zip_url: "@html_zip_url"
  pptx_url: "@pptx_url"
