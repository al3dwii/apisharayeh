services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-agentic}
    volumes: [pg_data:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-agentic}"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine

  migrate:
    image: ghcr.io/al3dwii/agenticbe:${IMAGE_TAG:-latest}
    depends_on: { db: { condition: service_healthy } }
    environment:
      DATABASE_URL: ${DATABASE_URL_SYNC}
      ENV: ${ENV}
      PYTHONPATH: /srv
    command: sh -lc "python -m alembic -c db/alembic.ini upgrade head"

  api:
    image: ghcr.io/al3dwii/agenticbe:${IMAGE_TAG:-latest}
    depends_on: [migrate, redis]
    environment:
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}
      ARTIFACTS_DIR: ${ARTIFACTS_DIR}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REDIS_URL_QUEUE: ${REDIS_URL_QUEUE}
      ENV: ${ENV}
      APP_NAME: ${APP_NAME}
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET}
      RATE_LIMIT_USER_PER_MIN: ${RATE_LIMIT_USER_PER_MIN}
      RATE_LIMIT_TENANT_PER_MIN: ${RATE_LIMIT_TENANT_PER_MIN}
      PYTHONPATH: /srv
    volumes: ["./artifacts:${ARTIFACTS_DIR}"]
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080
    expose: ["8080"]
    restart: unless-stopped

  worker:
    image: ghcr.io/al3dwii/agenticbe:${IMAGE_TAG:-latest}
    depends_on: [migrate, redis]
    environment:
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}
      ARTIFACTS_DIR: ${ARTIFACTS_DIR}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REDIS_URL_QUEUE: ${REDIS_URL_QUEUE}
      ENV: ${ENV}
      APP_NAME: ${APP_NAME}
      WEBHOOK_HMAC_SECRET: ${WEBHOOK_HMAC_SECRET}
      PYTHONPATH: /srv
    volumes: ["./artifacts:${ARTIFACTS_DIR}"]
    command: celery -A app.workers.celery_app worker --loglevel=INFO
    restart: unless-stopped

  caddy:
    image: caddy:2
    depends_on: [api]
    ports: ["80:80", "443:443"]
    environment:
      ACME_EMAIL: ${ACME_EMAIL}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config

volumes:
  pg_data:
  caddy_data:
  caddy_config:
